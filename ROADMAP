							-*-org-*-

* v1.0.0
** v0.1.0
*** v0.0.1
**** Maybe a webbased explorer ?
**** Must attach values to each node and maybe new commands
  Commands are actually implemented in src/main.rs's main loop
  Maybe {user,visibility,note}
  
- [X] Where are the actual commands : 
- [ ] Better output readability, maybe through a custom logger
  Actually, running with =RUST_LOG=info= produce too much info
  running without produce none
- [ ] Add a help command ?
**** Blockchain must be persistant
Must be saved to disk, add unit tested save and load function
**** Trying to fix github's dependabot issue
- see https://github.com/jepasq/notechain/security/dependabot
- [ ] Trying to upgrade libp2p version to 0.45.1 : do not compile anymore
**** Try to upgrade libp2p-noise dependency
  =cargo report future-incompatibilities --id 16=
- [ ] Before next update
  It's due to snow v0.8 that is an indirect dependency of libp2p-noise v0.32
  If we could upgrade libp2p-noise, maybe we could fix it
**** TODO Write and generate API documentation
- Write it using =cargo doc --open=
**** TODO Regular call to =cargo update= then tests and run
:LOGBOOK:
CLOCK: [2024-12-27 ven. 10:51]--[2024-12-27 ven. 11:00] =>  0:09
CLOCK: [2024-11-07 jeu. 09:23]--[2024-11-07 jeu. 09:33] =>  0:10
CLOCK: [2024-09-26 jeu. 13:02]--[2024-09-26 jeu. 13:34] =>  0:32
CLOCK: [2024-08-19 lun. 09:36]--[2024-08-19 lun. 09:41] =>  0:05
CLOCK: [2024-07-04 jeu. 04:21]--[2024-07-04 jeu. 04:31] =>  0:10
CLOCK: [2024-06-10 lun. 02:49]--[2024-06-10 lun. 03:00] =>  0:11
CLOCK: [2024-05-24 ven. 14:43]--[2024-05-24 ven. 14:56] =>  0:13
CLOCK: [2024-05-09 jeu. 17:47]--[2024-05-09 jeu. 17:59] =>  0:12
CLOCK: [2024-04-16 mar. 11:07]--[2024-04-16 mar. 11:15] =>  0:08
CLOCK: [2024-03-20 mer. 06:01]--[2024-03-20 mer. 06:12] =>  0:11
CLOCK: [2024-02-26 lun. 03:17]--[2024-02-26 lun. 03:22] =>  0:05
CLOCK: [2024-02-05 lun. 16:02]--[2024-02-05 lun. 16:19] =>  0:17
:END:
Even if tests are actually failing

- 02 Nov. 2023 : window -> window-core
- 11 Dec. 2023 : event-listener, getrandom and more
- 05 Feb. 2024 : async-*, libc, libp2p and more
- 26 Feb. 2024 : ahash, anyhow and more
- 20 Mar. 2024 : anyhow, syn, futures-lite and more
- 01 Apr. 2024 : event-listener-strategy, async-executor, async-trait and more
- 16 Apr. 2024 : windows_*, event-listener, pest, cc, async- and more
- 09 May 2024 : libp2p*, snow, libc and many more
- 24 May 2024 : anyhow*, cc, libc, serde, serde_derive, syn, thiserror
- 10 Jun. 2024 : async*, cc, regex*, serde and more
- 04 Jul. 2024 : aes-gcm, backtrace, bitflags, cc, cfg-if etx...
- 22 Jul. 2024 : 12 packages to latest compatible versions
- 19 aug. 2024 : async-io, syn, bytes, cc and others
- 06 Sep. 2024 : async-trait, cc, serde, syn tokio and others
- 26 Sep. 2024 : adler and miniz_oxide removed, many other upgraded
- 18 Oct. 2024 : 41 packages to latest compatible versions including
  cc, futures-*, libc, regex, wasm-* web-sys and others
- 07 Nov. 2024 : 41 packages including anyhow, bytes, cc, regex, serde_json
  tokio, url and others
- 29 Nov. 2024 : 34 crates including libc, cc, libp2p-*, serde and many other
- 27 Dec. 2024 : 32 packages including anyhow, fastrand, syn, cc and other
**** TODO Handle history
:LOGBOOK:
CLOCK: [2024-10-18 ven. 11:58]--[2024-10-18 ven. 12:06] =>  0:08
CLOCK: [2024-10-18 ven. 10:08]--[2024-10-18 ven. 10:37] =>  0:29
CLOCK: [2024-09-06 ven. 10:42]--[2024-09-06 ven. 10:55] =>  0:13
CLOCK: [2024-08-19 lun. 10:32]--[2024-08-19 lun. 10:45] =>  0:13
CLOCK: [2024-06-10 lun. 03:38]--[2024-06-10 lun. 03:54] =>  0:16
CLOCK: [2024-05-24 ven. 16:05]--[2024-05-24 ven. 16:38] =>  0:33
CLOCK: [2024-05-24 ven. 15:13]--[2024-05-24 ven. 15:47] =>  0:34
CLOCK: [2024-04-01 lun. 04:11]--[2024-04-01 lun. 04:43] =>  0:32
CLOCK: [2024-03-20 mer. 08:07]--[2024-03-20 mer. 08:14] =>  0:07
CLOCK: [2024-01-25 jeu. 14:06]--[2024-01-25 jeu. 14:44] =>  0:38
CLOCK: [2023-12-21 jeu. 09:20]--[2023-12-21 jeu. 09:40] =>  0:20
CLOCK: [2023-12-11 lun. 10:19]--[2023-12-11 lun. 10:33] =>  0:14
CLOCK: [2023-12-04 lun. 07:09]--[2023-12-04 lun. 08:00] =>  0:51
CLOCK: [2023-11-24 ven. 03:29]--[2023-11-24 ven. 04:19] =>  0:50
CLOCK: [2023-11-10 ven. 03:55]--[2023-11-10 ven. 04:29] =>  0:34
CLOCK: [2023-11-02 jeu. 02:57]--[2023-11-02 jeu. 03:00] =>  0:03
CLOCK: [2023-10-26 jeu. 04:45]--[2023-10-26 jeu. 05:02] =>  0:17
CLOCK: [2023-10-25 mer. 04:01]--[2023-10-25 mer. 04:27] =>  0:26
CLOCK: [2023-10-17 mar. 01:49]--[2023-10-17 mar. 02:24] =>  0:35
CLOCK: [2023-10-05 jeu. 15:00]--[2023-10-05 jeu. 15:18] =>  0:18
CLOCK: [2023-08-15 mar. 07:05]--[2023-08-15 mar. 07:22] =>  0:17
CLOCK: [2023-08-01 mar. 01:29]--[2023-08-01 mar. 01:38] =>  0:09
CLOCK: [2023-07-11 mar. 10:59]--[2023-07-11 mar. 11:11] =>  0:12
CLOCK: [2023-06-29 jeu. 07:15]--[2023-06-29 jeu. 07:34] =>  0:19
CLOCK: [2023-06-22 jeu. 03:55]--[2023-06-22 jeu. 04:23] =>  0:28
CLOCK: [2023-06-14 mer. 04:42]--[2023-06-14 mer. 04:56] =>  0:14
CLOCK: [2023-05-26 ven. 04:07]--[2023-05-26 ven. 04:21] =>  0:14
CLOCK: [2023-05-26 ven. 02:28]--[2023-05-26 ven. 02:35] =>  0:07
CLOCK: [2023-05-17 mer. 06:38]--[2023-05-17 mer. 06:42] =>  0:04
CLOCK: [2023-05-10 mer. 11:31]--[2023-05-10 mer. 11:59] =>  0:28
CLOCK: [2023-05-10 mer. 11:10]--[2023-05-10 mer. 11:19] =>  0:09
CLOCK: [2023-05-02 mar. 11:53]--[2023-05-02 mar. 12:09] =>  0:16
CLOCK: [2023-04-14 ven. 13:03]--[2023-04-14 ven. 13:09] =>  0:06
CLOCK: [2023-04-10 lun. 11:11]--[2023-04-10 lun. 11:24] =>  0:13
CLOCK: [2023-04-03 lun. 13:33]--[2023-04-03 lun. 13:45] =>  0:12
:END:
- [X] Add Swarm object as callback parameter
  - [X] Make test command work again : need a fake swarm object
    - [X] Now, fake appbehaviour must satisfy the NetworkBehaviour trait
      Trying to implement a new TestableBehaviour struct to fake it
- [X] Add a len command to know the number of generated blocks
  - [X] Command and callback created
  - [X] Now, must get this number, maybe through p2p.rs, with a Swarn global
    variables ? or maybe pass Swarm object as parameter of command exec ?
- [X] Now, we need a static History object in main.rs
  Try to add it to App object to get it through the behavior
- [X] Now, we must add all commands to App.history object instance
  Be sure we need a String object, not a &str : it's a String object
  - =ls p= command not added
- [X] Add a log to create b command to let the user know it worked
- [X] It writes len and history word for each commands, why ?
- [X] A !<number> command could call the nth one
  Should add the <number> helper in the help output
  - [X] Add a PromptCommand param field
  
- [ ] Up/down arrow could be used to navigate commands
  Currently testing in *crossterm-example/src/main.rs*
  - [ ] How to handle key event ? May try /crossterm/
    from https://stackoverflow.com/a/60130920
  - [ ] May try to upgrade croosterm version
  - [ ] May handle all other letters to add to a string then wait for return    
    
- [ ] UT build still falling : *2 error while building* due to the add of a
  swarm parameter
  - [ ] fn poll : =expected `Poll<()>`, found `()`=
    TestableBehavior::poll should return something
    Some errors have detailed explanations: E0277, E0599.
    For more information about an error, try `rustc --explain E0277`.
    
#+BEGIN_EXAMPLE
note: the following trait bounds were not satisfied:
  `impl std::future::Future<Output = TestableBehaviour>: NetworkBehaviour`
#+END_EXAMPLE	    

- [ ] =ls c= doesn't only show genesis block, it seems to print complete chain
- [ ] The =prompt::tests::test_prompt_exec_method_found_true= test fails
- [ ] May handle history of previous commands
  We Need a container with push_front here (either VecDeque or LinkedList)
  - [ ] Test and implement add(String) and list() functions

**** DONE Swarn UT fix
- [X] Former call to =cargo update= then tests and run
  10 Apr. 2023 : multiple updates
  14 Apr. 2023 : multiple updates (serde+ and syn)
  02 May 2023 : multiple updates
  26 May 2023 : again multiple updates
  15 Aug. 2023 : multiples updates
  29 Aug. 2023 : multiples updates (addr2line, anyhow, arrayref...)
- [X] Make build command work again
- [X] Implement History::len
- [X] Floodsub not found in this scope
- [X] unsatisfied trait bounds
  - =the trait bound `TestableBehaviour: NetworkBehaviourEventProcess<MdnsEvent>`=
      is not satisfied
- [X] Now, implement NetworkBehaviourEventProcess<FloodsubEvent> for
    TestableBehaviour
**** DONE Add a unit tested prompt struct and file
:LOGBOOK:
CLOCK: [2023-03-28 mar. 10:33]--[2023-03-28 mar. 10:44] =>  0:11
CLOCK: [2023-03-28 mar. 09:10]--[2023-03-28 mar. 09:45] =>  0:35
CLOCK: [2023-03-22 mer. 09:19]--[2023-03-22 mer. 09:32] =>  0:13
CLOCK: [2023-03-22 mer. 08:46]--[2023-03-22 mer. 08:58] =>  0:12
CLOCK: [2023-03-16 jeu. 09:46]--[2023-03-16 jeu. 09:56] =>  0:10
CLOCK: [2023-03-09 jeu. 09:03]--[2023-03-09 jeu. 09:17] =>  0:14
CLOCK: [2023-02-23 jeu. 04:13]--[2023-02-23 jeu. 04:58] =>  0:45
CLOCK: [2023-02-17 ven. 11:26]--[2023-02-17 ven. 11:53] =>  0:27
CLOCK: [2023-02-17 ven. 10:49]--[2023-02-17 ven. 11:09] =>  0:20
CLOCK: [2023-02-09 jeu. 14:30]--[2023-02-09 jeu. 15:00] =>  0:30
CLOCK: [2023-02-03 ven. 11:44]--[2023-02-03 ven. 12:20] =>  0:36
CLOCK: [2023-02-01 mer. 08:49]--[2023-02-01 mer. 08:58] =>  0:09
CLOCK: [2023-01-10 mar. 07:35]--[2023-01-10 mar. 07:48] =>  0:13
CLOCK: [2023-01-04 mer. 07:57]--[2023-01-04 mer. 08:10] =>  0:13
CLOCK: [2023-01-04 mer. 07:17]--[2023-01-04 mer. 07:45] =>  0:28
CLOCK: [2022-12-29 jeu. 05:52]--[2022-12-29 jeu. 06:13] =>  0:21
CLOCK: [2022-12-26 lun. 06:21]--[2022-12-26 lun. 06:38] =>  0:17
CLOCK: [2022-12-26 lun. 05:27]--[2022-12-26 lun. 05:33] =>  0:06
CLOCK: [2022-12-22 jeu. 02:38]--[2022-12-22 jeu. 02:53] =>  0:15
:END:
- [X] Explain how to run tests in README
- [X] Add a command prompt ?
  Prompt may be a new, unit tested, class
- [X] May add an intro with version, known commands etc...  
- [X] Add =help= command with basic intro-like test
- [X] May add a quit PromptCommand
- [X] Help command may print message related to callback-added commands    
- [X] Must find how to add new commands
  Maybe through callbacks (see https://stackoverflow.com/a/41081702)
  We will need a PromptCommand struct and a list
  - [X] Prompt must have a commands list (or vector)
  - [X] we can add some PromptCommand
  - [X] Execute callback when command is executed  
    Prompt::exec can return true if correctly handled false if not found
    Must fix actually failing unit test
  - [X] Must add pr.exec() to the accepted commands
- [X] Improve prompt with actual commands

**** DONE Correct project setup
- [X] Add GPLv3 license file
- [X] Make this project public when it works
**** DONE Follow tutorial
:LOGBOOK:
CLOCK: [2022-12-14 mer. 02:49]--[2022-12-14 mer. 03:07] =>  0:18
CLOCK: [2022-12-12 lun. 01:20]--[2022-12-12 lun. 01:23] =>  0:03
CLOCK: [2022-11-28 lun. 18:24]--[2022-11-28 lun. 19:02] =>  0:38
CLOCK: [2022-11-21 lun. 04:03]--[2022-11-21 lun. 04:19] =>  0:16
CLOCK: [2022-11-16 mer. 13:59]--[2022-11-16 mer. 14:13] =>  0:14
CLOCK: [2022-11-15 mar. 17:22]--[2022-11-15 mar. 17:47] =>  0:25
CLOCK: [2022-11-07 lun. 17:08]--[2022-11-07 lun. 17:18] =>  0:10
CLOCK: [2022-11-03 jeu. 13:52]--[2022-11-03 jeu. 14:09] =>  0:17
CLOCK: [2022-10-28 ven. 12:38]--[2022-10-28 ven. 12:55] =>  0:17
CLOCK: [2022-10-26 mer. 13:25]--[2022-10-26 mer. 13:54] =>  0:29
CLOCK: [2022-10-21 ven. 11:50]--[2022-10-21 ven. 11:56] =>  0:06
CLOCK: [2022-10-19 mer. 11:55]--[2022-10-19 mer. 12:09] =>  0:14
CLOCK: [2022-10-18 mar. 13:21]--[2022-10-18 mar. 13:30] =>  0:09
CLOCK: [2022-10-17 lun. 12:52]--[2022-10-17 lun. 13:07] =>  0:15
CLOCK: [2022-10-14 ven. 11:19]--[2022-10-14 ven. 11:43] =>  0:24
:END:
https://blog.logrocket.com/how-to-build-a-blockchain-in-rust/

Final source code : https://github.com/zupzup/rust-blockchain-example

- [X] To App implementation
- [X] From =Blocks, blocks, blocks= header
- [X] =Which chain to use?= header
- [X] =Mining=
- [X] =Peer-to-peer basics=
- [X] =Handling incoming messages=
- [X] =Putting it all together=
  - [X] Rebuild after update  
  - [X] 48 previous errors : See final source code as example
    Most are missing use/import errors. Now 39
  - [X] Only 17 now. Most errors come from a bad import or a missing one
    from tokyo.
  - [X] Only 4 error now  
- [X] =Testing our Rust blockchain=
  Add used command 
- [X] =Conclusion=  
